# app/n8n_builder.py
from typing import Dict, Any, List
import uuid
import copy

def _ensure_id(node: Dict[str, Any]) -> None:
    if not node.get("id"):
        node["id"] = str(uuid.uuid4())[:8]

def _index_by_id(nodes: List[Dict[str, Any]]) -> Dict[str, Dict[str, Any]]:
    return {n["id"]: n for n in nodes}

def make_minimal_valid_n8n(name: str, description: str = "") -> Dict[str, Any]:
    return {
        "name": name,
        "nodes": [
            {
                "id": "manual1",
                "name": "Manual Trigger",
                "type": "n8n-nodes-base.manualTrigger",
                "typeVersion": 1,
                "position": [200, 200],
                "parameters": {}
            },
            {
                "id": "set1",
                "name": "Set",
                "type": "n8n-nodes-base.set",
                "typeVersion": 2,
                "position": [500, 200],
                "parameters": {
                    "keepOnlySet": True,
                    "values": {"string": [{"name": "note", "value": description[:800]}]}
                }
            }
        ],
        "connections": {"manual1": {"main": [[{"node": "set1", "type": "main", "index": 0}]]}},
        "settings": {},
        "tags": ["generated", "fallback"]
    }

def validate_n8n_json(data: Dict[str, Any]) -> Dict[str, Any]:
    data = copy.deepcopy(data) if isinstance(data, dict) else {}
    data.setdefault("name", "Generated by Bot")
    data.setdefault("nodes", [])
    data.setdefault("connections", {})
    data.setdefault("settings", {})
    data.setdefault("tags", ["generated"])

    for n in data["nodes"]:
        _ensure_id(n)
    idx = _index_by_id(data["nodes"])

    pruned_connections = {}
    for src, conn in (data.get("connections") or {}).items():
        if src not in idx:
            continue
        valid_mains = []
        for lane in conn.get("main", []):
            new_lane = []
            for edge in lane:
                dest = edge.get("node")
                if dest in idx:
                    new_lane.append(edge)
            if new_lane:
                valid_mains.append(new_lane)
        if valid_mains:
            pruned_connections[src] = {"main": valid_mains}
    data["connections"] = pruned_connections

    if not data["connections"] and len(data["nodes"]) >= 2:
        s = data["nodes"][0]["id"]
        d = data["nodes"][1]["id"]
        data["connections"] = {s: {"main": [[{"node": d, "type": "main", "index": 0}]]}}

    return data
