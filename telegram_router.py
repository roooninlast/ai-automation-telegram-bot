# app/telegram_router.py
import os
import json
import httpx
from typing import Dict, Any
from app.ai import plan_workflow_with_ai, draft_n8n_json_with_ai
from app.n8n_builder import make_minimal_valid_n8n, validate_n8n_json
from app.library_loader import search_library_candidates

TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN", "")
TELEGRAM_API = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}"
START_MESSAGE = (
    "👋 أهلاً! أنا بوت بناء الأتمتتة لـ n8n.\n\n"
    "## كيف تستعملني؟\n"
    "1) اشرح طلبك بوضوح: *الهدف، المصدر/الخدمة، التكرار/الجدولة، والمخرجات المتوقعة.*\n"
    "   - مثال: \"كل 3 ساعات، جبلي سعر BTC من API، ثم أضف صفاً في Google Sheet باسم 'Prices'\".\n"
    "2) سأطرح أسئلة متابعة للتأكيد وجمع التفاصيل (أسماء الجداول، الحقول، التوكنات…).\n"
    "3) عند اكتمال المعلومات، سأرسل لك *ملف JSON جاهز للاستيراد في n8n Cloud*.\n\n"
    "نصائح لوصف ممتاز:\n"
    "• حدّد *الترِغر* (Webhook/Cron/Manual) + *الخطوات* (HTTP, IF, Set…) + *الوجهة النهائية* (Sheet/DB/API).\n"
    "• إن كان عندك حسابات/مفاتيح، اذكر الأسماء فقط. القِيَم الحسّاسة تبقى كـ env داخل n8n.\n\n"
    "اكتب: /generate لبدء جلسة توليد ورْكفلو جديدة ✨"
)

async def send_message(chat_id: int, text: str, reply_markup: Dict[str, Any] | None = None):
    async with httpx.AsyncClient(timeout=30) as client:
        payload = {"chat_id": chat_id, "text": text, "parse_mode": "Markdown"}
        if reply_markup:
            payload["reply_markup"] = reply_markup
        await client.post(f"{TELEGRAM_API}/sendMessage", json=payload)

async def send_document(chat_id: int, filename: str, content: bytes):
    async with httpx.AsyncClient(timeout=60) as client:
        files = {"document": (filename, content, "application/json")}
        data = {"chat_id": chat_id}
        await client.post(f"{TELEGRAM_API}/sendDocument", data=data, files=files)

async def handle_update(update: Dict[str, Any]):
    message = update.get("message") or update.get("edited_message")
    if not message:
        return
    chat_id = message["chat"]["id"]
    text = (message.get("text") or "").strip()

    if text in ("/start", "start", "/help"):
        await send_message(chat_id, START_MESSAGE)
        return

    if text.lower().startswith("/generate"):
        await send_message(
            chat_id,
            "تمام! اكتب وصف الأتمتتة التي تريدها بالتفصيل (الترغر، الخطوات، المخرجات). "
            "مثال: \"كل 3 ساعات، نادِ API سعر BTC ثم أضف صفاً في Google Sheets\"."
        )
        return

    # خطوة 1: تلخيص/تثبيت المتطلبات + اقتراح عقد/تريغر
    plan = await plan_workflow_with_ai(user_prompt=text)

    # خطوة 2: استغلال مكتبة جاهزة إن وجدت مناسبة (اختياري)
    library_hits = search_library_candidates(text, top_k=3)
    if library_hits:
        plan += "\n\n# LibraryHints\n" + json.dumps(library_hits, ensure_ascii=False)

    # خطوة 3: توليد n8n JSON عبر الـ AI
    raw_json = await draft_n8n_json_with_ai(plan)

    # خطوة 4: إنقاذ المخرجات دائماً إلى هيكل صالح للاستيراد + فحص
    try:
        n8n_json = json.loads(raw_json) if isinstance(raw_json, str) else raw_json
    except Exception:
        n8n_json = make_minimal_valid_n8n(
            name="Generated by Bot (Fallback)",
            description="AI failed to return valid JSON; inserted fallback. Plan:\n" + plan
        )

    n8n_json = validate_n8n_json(n8n_json)

    filename = (n8n_json.get("name") or "workflow").replace(" ", "_") + ".json"
    await send_document(chat_id, filename, json.dumps(n8n_json, ensure_ascii=False, indent=2).encode("utf-8"))

    await send_message(
        chat_id,
        "✅ تم إنشاء ملف n8n JSON جاهز للاستيراد. إن احتجت تعديلات (عُقد إضافية، شروط، حقول)، اكتب التفاصيل وسأولّد نسخة محدّثة."
    )
